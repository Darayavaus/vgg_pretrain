
# In[1]:

from keras.applications import VGG16
from keras.models import Model, load_model, Sequential, load_model
from keras.layers import Input, Convolution2D, MaxPooling2D, Dense, Dropout, Flatten
from keras.utils import np_utils
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
from keras.preprocessing import image
from keras.applications.resnet50 import preprocess_input, decode_predictions
from keras.callbacks import ModelCheckpoint, History


# In[2]:

import numpy as np
from scipy import misc


# In[3]:

from sklearn import utils
import os


# In[4]:

model_inp = Input(shape=((224,224,3)))
vgg_model = VGG16(weights='imagenet', include_top=False, input_tensor=model_inp)
for layer in vgg_model.layers[:15]:
          layer.trainable = False


# In[5]:

vgg_model.summary()


# In[6]:

img_width, img_height = 224, 224


# In[16]:

train_data_dir = 'bodies/train'
test_data_dir = 'bodies/test'
nb_train_samples = 3723
nb_validation_samples = 930
epochs = 100
batch_size = 32
num_classes = 4


# In[17]:

tmp_lables = [0,1,2,3]
arr=[]
print zip(sorted(os.listdir(train_data_dir)), tmp_lables)
for name, t in zip(sorted(os.listdir(train_data_dir)), tmp_lables):
    for subname in os.listdir(train_data_dir + '/' + name):
        arr.append(t)
print np.unique(arr, return_counts=True)
array=np.array(tmp_lables)
class_weight = utils.compute_class_weight(class_weight='balanced', classes=array, y=arr)


# In[18]:

class_weight = dict(zip(tmp_lables, class_weight))


# In[19]:

class_weight


# In[20]:

x = vgg_model.output


# In[21]:

x = Flatten()(x)
x = Dense(1000, activation='relu')(x)
x = Dropout(0.5)(x)
x = Dense(1000, activation = 'relu')(x)
x = Dropout(0.3)(x)
out = Dense(num_classes, activation='softmax')(x)


# In[22]:

model = Model(input=vgg_model.input, output=out)


# In[23]:

model.compile(loss='categorical_crossentropy',
              optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),
              metrics=['accuracy'])


# In[24]:

train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    rotation_range=5,
    horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_height, img_width),
#    color_mode='grayscale',
    batch_size=batch_size,
    class_mode='categorical')

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(img_height, img_width),
#    color_mode='grayscale',
    batch_size=batch_size,
    class_mode='categorical')


# In[25]:

check = ModelCheckpoint('vgg_bodies_weights.{epoch:02d}.h5', monitor='val_acc', save_best_only=False, verbose=1)


# fine-tune the model
history = model.fit_generator(
    train_generator,
    samples_per_epoch=nb_train_samples,
    nb_epoch=epochs,
    class_weight=class_weight,
    callbacks=[check])
f=open('bodies_log', 'w')
f.write(history.history)
f.close()


# In[28]:

model.evaluate_generator(test_generator,
                         val_samples=930, )



# In[27]:

history.history['acc']


# In[28]:

model.summary()

